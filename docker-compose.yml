version: "3"
networks:
  ogani:
   driver: bridge
   ipam:
     config:
       - subnet: 172.18.0.0/24
         gateway: 172.18.0.1 

volumes:
  rabbit:
  mongodb:  
  oganiapi:
  mssql:
  elasticsearch:
  
services:
  mssql-ogani:
   image: mcr.microsoft.com/mssql/server:2022-latest
   container_name: mssql-ogani
   restart: always
   networks:
    ogani:
     ipv4_address: 172.18.0.2
   volumes:
    - mssql:/var/opt/mssql
   ports:
    - "1434:1433" 
   environment:
    - ACCEPT_EULA=Y
    - MSSQL_SA_PASSWORD=!Dquery20@4
    - MSSQL_PID=Developer
   command: >
     /bin/bash -c " 
     /opt/mssql/bin/sqlservr & 
     sleep 30 && 
     /opt/mssql-tools/bin/sqlcmd -S . -U sa -P !Dquery20@4 -Q \"
       USE [master];
       
       IF NOT EXISTS (SELECT * FROM sys.server_principals WHERE name = '${ACCOUNT_USER}')
       BEGIN
         CREATE LOGIN ${ACCOUNT_USER} WITH PASSWORD = '${ACCOUNT_PASSWORD}';

        IF NOT EXISTS (SELECT * FROM sys.server_role_members WHERE member_principal_id = (SELECT principal_id FROM sys.server_principals WHERE name = '${ACCOUNT_USER}') AND role_principal_id = (SELECT principal_id FROM sys.server_principals WHERE name = 'db_creator'))
        BEGIN
          ALTER SERVER ROLE db_creator ADD MEMBER ${ACCOUNT_USER};
        END;
       END;
     \""
    
  rabbitmq-ogani:
   image: rabbitmq:3-management
   container_name: rabbitmq-ogani
   restart: always
   networks:
     ogani:
      ipv4_address: 172.18.0.3
   volumes:
     - rabbit:/app/wwwroot
   ports:
     - "5672:5672" 
     - "15672:15672" 
   environment:
     - RABBITMQ_DEFAULT_USER=${ACCOUNT_USER} 
     - RABBITMQ_DEFAULT_PASS=${ACCOUNT_PASSWORD}

  mongo-ogani:
   image: mongo:${MONGO_STACK_VERSION}
   container_name: mongo-ogani
   restart: always
   networks:
    ogani:
     ipv4_address: 172.18.0.4
   volumes:
    - mongodb:/data/db
   ports:
    - "27017:27017"
   environment:
    - MONGO_INITDB_ROOT_USERNAME=${ACCOUNT_USER}
    - MONGO_INITDB_ROOT_PASSWORD=${ACCOUNT_PASSWORD}
  
  elasticsearch-ogani:
   container_name: elasticsearch-ogani
   image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_SEARCH_STACK_VERSION}
   ports:
    - 9200:9200
   volumes:
    - elasticsearch:/usr/share/elasticsearch/data
   environment:
    - cluster.name=${ACCOUNT_USER}
    - ELASTIC_PASSWORD=${ACCOUNT_PASSWORD}
    - xpack.license.self_generated.type=${ELASTIC_LICENSE}
    - node.name=es01
    - discovery.type=single-node
    - bootstrap.memory_lock=true
    - ES_JAVA_OPTS=-Xms4g -Xmx4g
    - xpack.security.enrollment.enabled=true
   networks:
     ogani:
       ipv4_address: 172.18.0.5

  kibana-ogani:
    container_name: kibana-ogani
    image: docker.elastic.co/kibana/kibana:${ELASTIC_SEARCH_STACK_VERSION}
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch-ogani
    environment:
      - ELASTICSEARCH_USERNAME=${ELASTIC_SEARCH_USER}
      - ELASTICSEARCH_PASSWORD=${ACCOUNT_PASSWORD}
    networks:
      ogani:
        ipv4_address: 172.18.0.6
    extra_hosts:
     - elastic.ogani.az:172.18.0.5

  ogani-api:
   image: ogani-api:v1
   build:
    context: .
    dockerfile: ./src/Presentation/WebApi/Dockerfile
   container_name: ogani-api
   restart: always
   depends_on:
    - mssql-ogani
   networks:
    ogani:
     ipv4_address: 172.18.0.10
   volumes:
    - oganiapi:/app/wwwroot
   ports:
    - 5080:80
   environment:
    - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT_NAME}
    - SUPERADMIN_USER=${SUPERADMIN_USER}
    - SUPERADMIN_EMAIL=${SUPERADMIN_EMAIL}
    - SUPERADMIN_PASSWORD=${ACCOUNT_PASSWORD}
    - SOURCE_URL=http://localhost:5080
    - JWT__KEY=${JWT_KEY}
    - JWT__ISSUER=${JWT_ISSUER}
    - JWT__AUDIENCE=${JWT_AUDIENCE}
    - JWT__EXPIRATIONDURATIONMINUTES=${JWT_EXPIRATIONDURATIONMINUTES}
    - RABBIT_URL=amqp://${ACCOUNT_USER}:${ACCOUNT_PASSWORD}@rabbit.ogani.az:5672
    - "ConnectionStrings__cString=Data Source=sql.ogani.az;Initial Catalog=OganiDb;User Id=${ACCOUNT_USER};Password=${ACCOUNT_PASSWORD};MultipleActiveResultSets=False;Encrypt=false;App=OganiWebApp"
    - "Serilog__WriteTo[1]__Args__databaseUrl=mongodb://${ACCOUNT_USER}:${ACCOUNT_PASSWORD}@mongo.ogani.az/ogani?authSource=admin&authMechanism=SCRAM-SHA-1"
    - "ELASTIC_URL=https://elastic.ogani.az:9200"
    - "ELASTIC_USER=${ELASTIC_SEARCH_USER}"
    - "ELASTIC_PASSWORD=${ACCOUNT_PASSWORD}"
   extra_hosts:
    - sql.ogani.az:172.18.0.2
    - rabbit.ogani.az:172.18.0.3
    - mongo.ogani.az:172.18.0.4
    - elastic.ogani.az:172.18.0.5

  ogani-ui:
   image: ogani-ui:v1
   build:
    context: .
    dockerfile: ./src/Presentation/WebUI/Dockerfile
   container_name: ogani-ui
   restart: always
   networks:
    ogani:
     ipv4_address: 172.18.0.11
   ports:
    - "5081:80"
   environment: 
    - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT_NAME}
    - API_URL=http://api.ogani.az
   extra_hosts:
    - api.ogani.az:172.18.0.10